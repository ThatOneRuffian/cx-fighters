package main

func checkPlayerCollisionX (player1 Sprite, player2 Sprite, dX f32) (collision bool){
    var d1x f32
    var d2x f32
    var d1y f32
    var d2y f32
    
    var playerPadding f32 = (player1.width + player2.width)
	collision = false

    d1x = spriteLeft(player2) - spriteRight(player1)
	//d2x = spriteLeft(player1) - spriteRight(player2) + dX  // other x componet?
	
	d1y = spriteBottom(player2) - spriteTop(player1)
	d2y = spriteBottom(player1) - spriteTop(player2)
	
	if (d1y > 0.0 || d2y > 0.0 || d1x - dX < -playerPadding){ // if sprites are not on the same height then no collision 
		collision = false	
	}else if (d1x - dX <= 0.0 ){ // if x edges touch then collision
		collision = true
	}
	
}

func checkCollision(spriteA Sprite, spriteB Sprite) (collision bool) {
    var d1x f32
    var d1y f32
    var d2x f32
    var d2y f32

    collision = true

    d1x = spriteLeft(spriteB) - spriteRight(spriteA)
    d1y = spriteBottom(spriteB) - spriteTop(spriteA)
    d2x = spriteLeft(spriteA) - spriteRight(spriteB)
    d2y = spriteBottom(spriteA) - spriteTop(spriteB)

    if d1x >= 0.0 || d1y >= 0.0{
        collision = false
    }
    if d2x >= 0.0 || d2y >= 0.0 {
        collision = false
    }
}

func checkWinCollisionX(sprite *Sprite, delta f32)( collision bool){

	var spritePadding f32 = sprite.width/2.0

	if(sprite.position.x + delta + spritePadding > 1.0 || sprite.position.x + delta - spritePadding < -1.0){  // window boundaries
		collision = true
	} else{
		collision = false
	}
}

func spriteTop(sprite Sprite) (out f32) {
    out = f32.add(sprite.position.y, f32.div(sprite.height, 2.0))
}

func spriteBottom(sprite Sprite)(out f32) {
    out = f32.sub(sprite.position.y, f32.div(sprite.height, 2.0))
}

func spriteRight(sprite Sprite)(out f32) {
    out = f32.add(sprite.position.x, f32.div(sprite.width, 2.0))
}

func spriteLeft(sprite Sprite)(out f32) {
    out = f32.sub(sprite.position.x, f32.div(sprite.width, 2.0))
}

func spriteLastTop(sprite Sprite)(out f32) {
    out = f32.add(sprite.lastPosition.y, f32.div(sprite.height, 2.0))
}

func spriteLastBottom(sprite Sprite)(out f32) {
    out = f32.sub(sprite.lastPosition.y, f32.div(sprite.height, 2.0))
}

func spriteLastRight(sprite Sprite)(out f32) {
    out = f32.add(sprite.lastPosition.x, f32.div(sprite.width, 2.0))
}

func spriteLastLeft(sprite Sprite)(out f32) {
    out = f32.sub(sprite.lastPosition.x, f32.div(sprite.width, 2.0))
}

// ============== Old reference code ================

func checkBrickCollisions() {
    var collision bool
    var brick Sprite

    for i:=0; i<len(bricks); i=i+1 {
        brick = bricks[i]

        if brick.brickHit == false {
            collision = checkCollision(brick, yarnBall)

            if collision == true {
                if spriteTop(brick) < yarnBall.position.y {
                    yarnBall.position.y = f32.add(spriteTop(brick), f32.div(yarnBall.height, 2.0))
                    yarnBall.velocity.y = f32.mul(yarnBall.velocity.y, 1.0)
                } else if spriteBottom(brick) > yarnBall.position.y {
                    yarnBall.position.y = f32.sub(spriteBottom(brick), f32.div(yarnBall.height, 2.0))
                    yarnBall.velocity.y = f32.mul(yarnBall.velocity.y, 1.0)
                } else if brick.position.x < yarnBall.position.x {
                    yarnBall.position.x = f32.add(spriteRight(brick), f32.div(yarnBall.width, 2.0))
                    yarnBall.velocity.x = f32.mul(yarnBall.velocity.x, 1.0)
                } else if brick.position.x > yarnBall.position.x {
                    yarnBall.position.x = f32.sub(spriteLeft(brick), f32.div(yarnBall.width, 2.0))
                    yarnBall.velocity.x = f32.mul(yarnBall.velocity.x, 1.0)
                }

                brick.brickHit = true

                bricks[i] = brick
            }
        }
    }
}
