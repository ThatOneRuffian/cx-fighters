package main

import "window"

type Vector2D struct {
    x f32
    y f32
}

type Sprite struct {
    position Vector2D
    lastPosition Vector2D
    velocity Vector2D
    acceleration f32
    maxVelocity f32
    width f32
    height f32
    frames []i32
    brickHit bool
    currentFrame i32
    health f32
	speed i32		// speed of character
	name str		// name of character
	jumping bool	// track if the character is jumping
	jumpCount i32
	direction i32  // for determining the facing orientation of the player sprite
}

func getTexture(textureFileName str)(texture i32) {
    var workingDirectory str = os.GetWorkingDirectory()

    texture = gl.NewTexture(str.concat(workingDirectory, textureFileName))
}

func updatePlayer1Position(sprite *Sprite){
    // move deltas
    var dX f32 = f32.mul(sprite.velocity.x, f64.f32(loopTracker.deltaTime))
    var dY f32 = f32.mul(sprite.velocity.y, f64.f32(loopTracker.deltaTime))
	var windowCollisionX bool = checkWinCollisionX(sprite, dX)
	var playerCollision bool = checkPlayerCollisionX(player1, player2, dX)
	
	if (dX > 0.0){
		sprite.direction = 1
	} else if (dX < 0.0){
		sprite.direction = -1
	}
	
	if (windowCollisionX){ // collision detection
		dX = 0.0
	}
	if (playerCollision){
		dX = 0.0
	}	

	sprite.position.x = sprite.position.x + dX
	sprite.position.y = sprite.position.y + dY
}

func updatePlayer2Position(sprite *Sprite){
    // move deltas
    var dX f32 = f32.mul(sprite.velocity.x, f64.f32(loopTracker.deltaTime))
    var dY f32 = f32.mul(sprite.velocity.y, f64.f32(loopTracker.deltaTime))
	var windowCollisionX bool = checkWinCollisionX(sprite, dX)
	var playerCollision bool = checkPlayerCollisionX(player2, player1, dX)
	
	if (dX > 0.0){
		sprite.direction = 1
	} else if (dX < 0.0){
		sprite.direction = -1
	}
	
	if (windowCollisionX){ // collision detection
		dX = 0.0
	}
	if (playerCollision){
		dX = 0.0
	}	

	sprite.position.x = sprite.position.x + dX
	sprite.position.y = sprite.position.y + dY
}

func drawSprites(sprites []Sprite) {
    for i := 0; i < len(sprites); i = i + 1 {
        drawSprite(sprites[i])
    }
}

func drawPlayer1Hp(sprites []Sprite) {
	
	var hpSliceCount i32 = f32.i32(i32.f32(len(sprites))*(player1.health/100.0))
	
    for i := 0; i < hpSliceCount; i = i + 1 {
        drawSprite(sprites[i])
    }
}

func drawPlayer2Hp(sprites []Sprite) {
	
	var hpSliceCount i32 = f32.i32(i32.f32(len(sprites))*(player2.health/100.0))
	
    for i := 0; i < hpSliceCount; i = i + 1 {
        drawSprite(sprites[i])
    }
}

func drawSprite(sprite Sprite) {
    var width f32
    var height f32
    var frame i32
	var x f32
	var y f32

    width = sprite.width
    height = sprite.height
    x = sprite.position.x
    y = sprite.position.y

    frame = sprite.frames[sprite.currentFrame]

    draw(x, y, width, height, frame, sprite.direction)
}

func drawSpriteFrame(sprite Sprite, frameIndex i32) {   // render a frame with provided index
    var width f32
    var height f32
    var frame i32
	var x f32
	var y f32

    width = sprite.width
    height = sprite.height
    x = sprite.position.x
    y = sprite.position.y

	sprite.currentFrame = frameIndex

    frame = sprite.frames[sprite.currentFrame]

    draw(x, y, width, height, frame, sprite.direction)
}

func draw(xCoord f32, yCoord f32, width f32, height f32, texture i32, direction i32) {
	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()
    gl.Translatef(xCoord, yCoord, 0.0)
    //gl.Rotatef(0.0, 0.0, 0.0, 1.0) // I'm not sure what this does...
    gl.BindTexture(gl.TEXTURE_2D, texture)
    
    if ( direction == -1 || direction == 1){          			  // sprite flipping filter all other possible values
		gl.Scalef(i32.f32(direction)*width/2.0, height/2.0, 0.0)  // flip sprite
	} else{
		gl.Scalef(width/2.0, height/2.0, 0.0) 					  // no flip bit detected 
	}
	
	gl.Color4f(1.0, 1.0, 1.0, 1.0)

    gl.Begin(gl.QUADS)
	gl.Normal3f(0.0, 0.0, 0.0)
    gl.TexCoord2d(0.0D, 0.0D)
    gl.Vertex2f(-1.0, 1.0)
    gl.TexCoord2d(1.0D, 0.0D)
    gl.Vertex2f(1.0, 1.0)
    gl.TexCoord2d(1.0D, 1.0D)
    gl.Vertex2f(1.0, -1.0)
    gl.TexCoord2d(0.0D, 1.0D)
    gl.Vertex2f(-1.0, -1.0)
    gl.End()
}


