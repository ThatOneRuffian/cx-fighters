package main

import "glfw"
import "inputs"

var background Sprite // game sprites
var synthCat Sprite
var yarnBall Sprite
var bricks []Sprite

func gameLoop()() {
    var program i32 = gl.CreateProgram() // create program object to apply shaders and 
    
    initSprites() 	// create sprites and their starting location
	
    for bool.not(glfw.ShouldClose("window")) && gameWindow.Running {
		updateGameTimers() // frame rate, animation, and tracking
		
		updateActions() // update game data based on player inputs
		updateSprites() // update sprite positions based on their velocity
		
        if loopLimiter.limitReached {
            
			window.prepWindowGl(program)  // reload gl window attributes
			renderSprites()
            glfw.PollEvents()  			// poll keyboard and mouse events
            glfw.SwapBuffers("window")  // update screen buffer
        }
    }
    str.print("Game Exiting")
}

func updateActions(){
	window.updateWindow(&gameWindow) // parse player input meant for the current window 
	inputs.updatePlayer(&synthCat)
	synthCat.jump()
}

func updateSprites(){
	updateSpritePosition(&synthCat)
}

func initSprites() {
    background = createBackgroundSprite()

    synthCat  = createSynthCatSprite()
    synthCat.position.y = gameFloor   
    synthCat.position.x = player1SpawnX
    
    yarnBall = createYarnBallSprite()
    yarnBall.position.x = 0.0
    yarnBall.position.y = -0.8
    yarnBall.velocity.y = 0.3
    yarnBall.velocity.x = 0.6

	synthCat.jumping = false
	synthCat.jumpCount = 0
	initGround(cobbleStone)
    //initBricks()
}

func renderSprites(){
	drawSprite(background)
    drawSprite(synthCat)
    drawSprites(gameFloors)
    //drawSprite(yarnBall)
    //render array of sprites
    //drawSprites(bricks)

}

func updateGameTimers() {
	// update game timers

	currentTime = glfw.GetTime()
	loopLimiter = LoopLimiter.update(loopLimiter, currentTime)    
	animationLimiter = LoopLimiter.update(animationLimiter, currentTime)
	loopTracker = LoopTracker.update(loopTracker, currentTime)
}



// ============== Old reference code ================

func initBricks() {
    var startPos Vector2D
    var increment f32
    increment = 128.0 / 1024.0
    startPos.x = -0.55
    startPos.y = -0.6

    for i:=0; i<8; i=i+1 {
        startPos.x = startPos.x + increment
        bricks = append(bricks, createBrickSprite(startPos))
    }
}

func updateBall(ball Sprite)(out Sprite) {
    if ball.position.x >= 0.9 || ball.position.x <= -0.9 {
        ball.velocity.x = ball.velocity.x*-1.0
        if ball.position.x > 0.9 {
            ball.position.x = 0.9
        } else {
            ball.position.x = -0.9
        }
    }
    
    if ball.position.y >= 0.9 || ball.position.y <= -0.9 {
        ball.velocity.y = ball.velocity.y*-1.0
        if ball.position.y > 0.9 {
            ball.position.y = 0.9
        } else {
            ball.position.y = -0.9
        }
    }

    if spriteTop(ball) > spriteBottom(synthCat) && spriteLastTop(ball) < spriteLastBottom(synthCat) {
        if spriteRight(ball) >= spriteLeft(synthCat) && spriteLeft(ball) <= spriteRight(synthCat) {
            ball.position.y = spriteBottom(synthCat) - ball.height / 2.0
            ball.velocity.y = ball.velocity.y*-1.0
        }
    }

    ball.lastPosition = ball.position
    out = ball
}

// create function to init generic sprites

func createYarnBallSprite()(yarnBall Sprite) {
    yarnBall.acceleration = 1.0
    yarnBall.maxVelocity = 1.0
    yarnBall.width = 64.0 / 1024.0
    yarnBall.height = 64.0 / 768.0

    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall0.png"))
    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall1.png"))
    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall2.png"))
    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall3.png"))
}

func createBrickSprite(position Vector2D)(brick Sprite) {
    brick.position = position
    brick.width = 128.0 / 1024.0
    brick.height = 64.0 / 768.0

    brick.frames = append(brick.frames, getTexture("textures/brick.png"))
}

func createBackgroundSprite()(background Sprite) {
    background.width = 2.0  //scaled?
    background.height = 2.0

    background.frames = append(background.frames, getTexture("textures/background.png"))
}

func createSynthCatSprite()(synthCat Sprite) {
    synthCat.acceleration = 1.0
    synthCat.maxVelocity = 1.25
    synthCat.width = 200.0 / 1024.0
    synthCat.height = 200.0 / 768.0

    synthCat.frames = append(synthCat.frames, getTexture("textures/synth_cat.png"))
}
